"use client"

import { useState, useEffect } from "react"
import { useRouter } from "next/navigation"
import { Button } from "@/components/ui/button"
import { Card, CardContent } from "@/components/ui/card"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Input } from "@/components/ui/input"
import { apiClient } from "@/lib/api"
import {
  Bug,
  Cloud,
  DollarSign,
  FileText,
  FlaskConical,
  HelpCircle,
  Languages,
  LogOut,
  MessageCircle,
  Mic,
  Search,
  Sprout,
  Users,
  ChevronDown,
  Tractor,
  Bot,
  X,
} from "lucide-react"

interface DashboardProps {
  farmerName: string
  onLogout: () => void
}

interface ChatContext {
  type?: 'weather' | 'crop' | 'pest' | 'market' | 'schemes' | 'soil' | 'general'
  data?: any
  location?: string
}

const featuresData = [
  {
    icon: Cloud,
    labels: {
      hindi: "рдореМрд╕рдо рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди",
      english: "Weather Forecast",
      tamil: "ро╡ро╛ройро┐ро▓рпИ роорпБройрпНройро▒ро┐ро╡ро┐рокрпНрокрпБ",
      bengali: "ржЖржмрж╣рж╛ржУржпрж╝рж╛ ржкрзВрж░рзНржмрж╛ржнрж╛рж╕",
      marathi: "рд╣рд╡рд╛рдорд╛рди рдЕрдВрджрд╛рдЬ",
      gujarati: "рк╣рк╡рк╛ркорк╛рки ркЖркЧрк╛рк╣рлА",
      punjabi: "риорйМри╕рио рижрйА ринри╡ри┐рй▒риЦримри╛ригрйА",
      kannada: "р▓╣р▓╡р▓╛р▓ор▓╛р▓и р▓ор│Бр▓ир│Нр▓ир│Лр▓Я",
      telugu: "р░╡р░╛р░др░╛р░╡р░░р░г р░Ер░Вр░Ър░ир░╛",
      bhojpuri: "рдореМрд╕рдо рдХреЗ рдЕрдиреБрдорд╛рди",
      odia: "рмкрм╛рмгрм┐рмкрм╛рмЧ рмкрнВрм░рнНрммрм╛рмирнБрморм╛рми"
    },
    gradient: "from-blue-400 to-cyan-500",
    hoverGradient: "hover:from-blue-500 hover:to-cyan-600",
  },
  {
    icon: Sprout,
    labels: {
      hindi: "рдлрд╕рд▓ рд╕реБрдЭрд╛рд╡",
      english: "Crop Advice",
      tamil: "рокропро┐ро░рпН роЖро▓рпЛроЪройрпИ",
      bengali: "ржлрж╕рж▓ ржкрж░рж╛ржорж░рзНрж╢",
      marathi: "рдкреАрдХ рд╕рд▓реНрд▓рд╛",
      gujarati: "рккрк╛ркХ рк╕рк▓рк╛рк╣",
      punjabi: "рилри╕ри▓ ри╕ри▓ри╛ри╣",
      kannada: "р▓мр│Жр▓│р│Ж р▓╕р▓▓р▓╣р│Ж",
      telugu: "р░кр░Вр░Я р░╕р░▓р░╣р░╛",
      bhojpuri: "рдлрд╕рд▓ рдХреЗ рд╕рд▓рд╛рд╣",
      odia: "рмлрм╕рм▓ рмкрм░рм╛рморм░рнНрм╢"
    },
    gradient: "from-green-400 to-emerald-500",
    hoverGradient: "hover:from-green-500 hover:to-emerald-600",
  },
  {
    icon: Bug,
    labels: {
      hindi: "рдХреАрдЯ рдирд┐рдпрдВрддреНрд░рдг",
      english: "Pest Control",
      tamil: "рокрпВроЪрпНроЪро┐ роХроЯрпНроЯрпБрокрпНрокро╛роЯрпБ",
      bengali: "ржХрзАржЯржкрждржЩрзНржЧ ржирж┐ржпрж╝ржирзНрждрзНрж░ржг",
      marathi: "рдХреАрдб рдирд┐рдпрдВрддреНрд░рдг",
      gujarati: "ркЬркВркдрлБ ркирк┐ркпркВркдрлНрк░ркг",
      punjabi: "риХрйАрйЬрйЗ риири┐рипрй░ридри░риг",
      kannada: "р▓Хр│Ар▓Я р▓ир▓┐р▓пр▓Вр▓др│Нр▓░р▓г",
      telugu: "р░Хр▒Ар░Яр░Х р░ир░┐р░пр░Вр░др▒Нр░░р░г",
      bhojpuri: "рдХреАрдбрд╝рд╛ рдирд┐рдпрдВрддреНрд░рдг",
      odia: "рмХрнАрмЯ рмирм┐рнЯрмирнНрмдрнНрм░рмг"
    },
    gradient: "from-red-400 to-pink-500",
    hoverGradient: "hover:from-red-500 hover:to-pink-600",
  },
  {
    icon: DollarSign,
    labels: {
      hindi: "рдордВрдбреА рднрд╛рд╡",
      english: "Market Prices",
      tamil: "роЪроирпНродрпИ ро╡ро┐ро▓рпИ",
      bengali: "ржмрж╛ржЬрж╛рж░ ржжрж╛ржо",
      marathi: "рдмрд╛рдЬрд╛рд░ рднрд╛рд╡",
      gujarati: "ркмркЬрк╛рк░ ркнрк╛рк╡",
      punjabi: "риори╛ри░риХрйАриЯ ри░рйЗриЯ",
      kannada: "р▓ор▓╛р▓░р│Бр▓Хр▓Яр│Нр▓Яр│Ж р▓мр│Жр▓▓р│Ж",
      telugu: "р░ор░╛р░░р▒Нр░Хр▒Жр░Яр▒Н р░зр░░р░▓р▒Б",
      bhojpuri: "рдмрд╛рдЬрд╛рд░ рдХреЗ рднрд╛рд╡",
      odia: "рммрмЬрм╛рм░ рмжрм░"
    },
    gradient: "from-yellow-400 to-orange-500",
    hoverGradient: "hover:from-yellow-500 hover:to-orange-600",
  },
  {
    icon: FileText,
    labels: {
      hindi: "рд╕рд░рдХрд╛рд░реА рдпреЛрдЬрдирд╛рдПрдВ",
      english: "Government Schemes",
      tamil: "роЕро░роЪрпБ родро┐роЯрпНроЯроЩрпНроХро│рпН",
      bengali: "рж╕рж░ржХрж╛рж░рж┐ ржкрзНрж░ржХрж▓рзНржк",
      marathi: "рд╕рд░рдХрд╛рд░реА рдпреЛрдЬрдирд╛",
      gujarati: "рк╕рк░ркХрк╛рк░рлА ркпрлЛркЬркирк╛ркУ",
      punjabi: "ри╕ри░риХри╛ри░рйА ри╕риХрйАриори╛риВ",
      kannada: "р▓╕р▓░р│Нр▓Хр▓╛р▓░р▓┐ р▓пр│Лр▓Ьр▓ир│Жр▓Чр▓│р│Б",
      telugu: "р░кр▒Нр░░р░нр▒Бр░др▒Нр░╡ р░кр░ер░Хр░╛р░▓р▒Б",
      bhojpuri: "рд╕рд░рдХрд╛рд░реА рдпреЛрдЬрдирд╛",
      odia: "рм╕рм░рмХрм╛рм░рнА рмпрнЛрмЬрмирм╛"
    },
    gradient: "from-purple-400 to-violet-500",
    hoverGradient: "hover:from-purple-500 hover:to-violet-600",
  },
  {
    icon: Users,
    labels: {
      hindi: "рдХрд┐рд╕рд╛рди рд╕рдореБрджрд╛рдп",
      english: "Farmer Community",
      tamil: "ро╡ро┐ро╡роЪро╛ропро┐ роЪроорпВроХроорпН",
      bengali: "ржХрзГрж╖ржХ рж╕ржорзНржкрзНрж░ржжрж╛ржпрж╝",
      marathi: "рд╢реЗрддрдХрд░реА рд╕рдореБрджрд╛рдп",
      gujarati: "ркЦрлЗркбрлВркд рк╕ркорлБркжрк╛ркп",
      punjabi: "риХри┐ри╕ри╛рии ринри╛риИриЪри╛ри░ри╛",
      kannada: "р▓░р│Ир▓д р▓╕р▓ор│Бр▓жр▓╛р▓п",
      telugu: "р░░р▒Ир░др▒Б р░╕р░ор░╛р░Ьр░В",
      bhojpuri: "рдХрд┐рд╕рд╛рди рд╕рдореБрджрд╛рдп",
      odia: "рмХрнГрм╖рмХ рм╕рморнНрмкрнНрм░рмжрм╛рнЯ"
    },
    gradient: "from-pink-400 to-rose-500",
    hoverGradient: "hover:from-pink-500 hover:to-rose-600",
  },
  {
    icon: FlaskConical,
    labels: {
      hindi: "рдорд┐рдЯреНрдЯреА рд╕реНрд╡рд╛рд╕реНрдереНрдп",
      english: "Soil Health",
      tamil: "роорогрпН роЖро░рпЛроХрпНроХро┐ропроорпН",
      bengali: "ржорж╛ржЯрж┐рж░ рж╕рзНржмрж╛рж╕рзНржерзНржп",
      marathi: "рдорд╛рддреА рдЖрд░реЛрдЧреНрдп",
      gujarati: "ркорк╛ркЯрлАркирлА ркдркВркжрлБрк░рк╕рлНркдрлА",
      punjabi: "риори┐рй▒риЯрйА рижрйА ри╕ри┐ри╣рид",
      kannada: "р▓ор▓гр│Нр▓гр▓┐р▓и р▓Жр▓░р│Лр▓Чр│Нр▓п",
      telugu: "р░ир▒Зр░▓ р░Жр░░р▒Лр░Чр▒Нр░пр░В",
      bhojpuri: "рдорд╛рдЯреА рдХреЗ рд╕реЗрд╣рдд",
      odia: "рморм╛рмЯрм┐рм░ рм╕рнНрн▒рм╛рм╕рнНрмернНрнЯ"
    },
    gradient: "from-amber-400 to-yellow-500",
    hoverGradient: "hover:from-amber-500 hover:to-yellow-600",
  },
  {
    icon: MessageCircle,
    labels: {
      hindi: "AI рднрд╛рд╖рд╛ рд╕рд╣рд╛рдпрдХ",
      english: "AI Language Assistant",
      tamil: "AI роорпКро┤ро┐ роЙродро╡ро┐ропро╛ро│ро░рпН",
      bengali: "AI ржнрж╛рж╖рж╛ рж╕рж╣рж╛ржпрж╝ржХ",
      marathi: "AI рднрд╛рд╖рд╛ рд╕рд╣рд╛рдпреНрдпрдХ",
      gujarati: "AI ркнрк╛рк╖рк╛ рк╕рк╣рк╛ркпркХ",
      punjabi: "AI ринри╛ри╕ри╝ри╛ ри╕ри╣ри╛риЗриХ",
      kannada: "AI р▓нр▓╛р▓╖р▓╛ р▓╕р▓╣р▓╛р▓пр▓Х",
      telugu: "AI р░нр░╛р░╖р░╛ р░╕р░╣р░╛р░пр░Хр▒Бр░бр▒Б",
      bhojpuri: "AI рднрд╛рд╖рд╛ рд╕рд╣рд╛рдпрдХ",
      odia: "AI рмнрм╛рм╖рм╛ рм╕рм╣рм╛рнЯрмХ"
    },
    gradient: "from-indigo-400 to-blue-500",
    hoverGradient: "hover:from-indigo-500 hover:to-blue-600",
  },
  {
    icon: HelpCircle,
    labels: {
      hindi: "рд╕рд╣рд╛рдпрддрд╛ рдбреЗрд╕реНрдХ",
      english: "Help Desk",
      tamil: "роЙродро╡ро┐ роорпИропроорпН",
      bengali: "рж╕рж╛рж╣рж╛ржпрзНржп ржбрзЗрж╕рзНржХ",
      marathi: "рдорджрдд рдбреЗрд╕реНрдХ",
      gujarati: "ркоркжркж ркбрлЗрк╕рлНркХ",
      punjabi: "риорижриж рибрйИри╕риХ",
      kannada: "р▓╕р▓╣р▓╛р▓п р▓бр│Жр▓╕р│Нр▓Хр│Н",
      telugu: "р░╕р░╣р░╛р░п р░бр▒Жр░╕р▒Нр░Хр▒Н",
      bhojpuri: "рд╕рд╣рд╛рдпрддрд╛ рдбреЗрд╕реНрдХ",
      odia: "рм╕рм╛рм╣рм╛рмпрнНрнЯ рмбрнЗрм╕рнНрмХ"
    },
    gradient: "from-teal-400 to-green-500",
    hoverGradient: "hover:from-teal-500 hover:to-green-600",
  },
]

const farmerQuotes = [
  {
    hindi: "рдЦреЗрддреА рдПрдХ рдХрд▓рд╛ рд╣реИ, рдХрд┐рд╕рд╛рди рдПрдХ рдХрд▓рд╛рдХрд╛рд░ рд╣реИред",
    english: "Farming is an art, the farmer is an artist.",
    tamil: "ро╡ро┐ро╡роЪро╛ропроорпН роТро░рпБ роХро▓рпИ, ро╡ро┐ро╡роЪро╛ропро┐ роТро░рпБ роХро▓рпИроЮро░рпН.",
  },
  {
    hindi: "рдореЗрд╣рдирдд рдХрд╛ рдлрд▓ рд╣рдореЗрд╢рд╛ рдореАрдард╛ рд╣реЛрддрд╛ рд╣реИред",
    english: "The fruit of hard work is always sweet.",
    tamil: "роХроЯро┐рой роЙро┤рпИрокрпНрокро┐ройрпН рокро▓ройрпН роОрокрпНрокрпЛродрпБроорпН роЗройро┐роорпИропро╛ройродрпБ.",
  },
  {
    hindi: "рдзрд░рддреА рдорд╛рддрд╛ рдХрд╛ рд╕рдореНрдорд╛рди рдХрд░реЛ, рд╡реЛ рддреБрдореНрд╣реЗрдВ рд╕рдм рдХреБрдЫ рджреЗрдЧреАред",
    english: "Respect Mother Earth, she will give you everything.",
    tamil: "рокрпВрооро┐ родро╛ропрпИ роородро┐роХрпНроХро╡рпБроорпН, роЕро╡ро│рпН роЙроЩрпНроХро│рпБроХрпНроХрпБ роОро▓рпНро▓ро╛ро╡ро▒рпНро▒рпИропрпБроорпН родро░рпБро╡ро╛ро│рпН.",
  },
  {
    hindi: "рдмреАрдЬ рдореЗрдВ рдЫреБрдкрд╛ рд╣реИ рдкреВрд░рд╛ рдЬрдВрдЧрд▓ред",
    english: "A whole forest is hidden in a seed.",
    tamil: "роТро░рпБ ро╡ро┐родрпИропро┐ро▓рпН роорпБро┤рпБ роХро╛роЯрпБроорпН рооро▒рпИроирпНродрпБро│рпНро│родрпБ.",
  },
]

export default function Dashboard({ farmerName, onLogout }: DashboardProps) {
  const router = useRouter()
  const [language, setLanguage] = useState("english")
  const [currentQuoteIndex, setCurrentQuoteIndex] = useState(0)
  const [askQuery, setAskQuery] = useState("")
  const [userLocation, setUserLocation] = useState<string>('')

  // Get features with dynamic labels based on language
  const getFeatures = () => {
    return featuresData.map(feature => ({
      ...feature,
      label: feature.labels[language as keyof typeof feature.labels] || feature.labels.english
    }))
  }

  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentQuoteIndex((prev) => (prev + 1) % farmerQuotes.length)
    }, 10000) // 10 seconds

    return () => clearInterval(interval)
  }, [])

  const handleLanguageChange = (newLanguage: string) => {
    console.log('Language changing to:', newLanguage)
    setLanguage(newLanguage)
    // Force re-render by updating state
    setTimeout(() => {
      console.log('Language state updated to:', newLanguage)
    }, 100)
  }

  const getGreeting = () => {
    switch (language) {
      case "hindi":
        return `рдирдорд╕реНрддреЗ ${farmerName} ЁЯСЛ | рдХрд┐рд╕рд╛рди рдХрд╛ рд╕рд╛рдереА тАУ annData`
      case "tamil":
        return `ро╡рогроХрпНроХроорпН ${farmerName} ЁЯСЛ | ро╡ро┐ро╡роЪро╛ропро┐ропро┐ройрпН родрпБрогрпИ тАУ annData`
      case "bengali":
        return `ржиржорж╕рзНржХрж╛рж░ ${farmerName} ЁЯСЛ | ржХрзГрж╖ржХрзЗрж░ рж╕рж╛ржерзА тАУ annData`
      case "marathi":
        return `рдирдорд╕реНрдХрд╛рд░ ${farmerName} ЁЯСЛ | рд╢реЗрддрдХрд▒реНрдпрд╛рдЪрд╛ рд╕рд╛рдереА тАУ annData`
      case "gujarati":
        return `ркиркорк╕рлНркдрлЗ ${farmerName} ЁЯСЛ | ркЦрлЗркбрлВркдркирлЛ рк╕рк╛ркерлА тАУ annData`
      case "punjabi":
        return `ри╕рид ри╕рйНри░рйА риЕриХри╛ри▓ ${farmerName} ЁЯСЛ | риХри┐ри╕ри╛рии рижри╛ ри╕ри╛риерйА тАУ annData`
      case "kannada":
        return `р▓ир▓ор▓╕р│Нр▓Хр▓╛р▓░ ${farmerName} ЁЯСЛ | р▓░р│Ир▓др▓и р▓╕р▓╣р▓╛р▓пр▓Х тАУ annData`
      case "telugu":
        return `р░ир░ор░╕р▒Нр░Хр░╛р░░р░В ${farmerName} ЁЯСЛ | р░░р▒Ир░др▒Б р░ор░┐р░др▒Нр░░р▒Бр░бр▒Б тАУ annData`
      case "bhojpuri":
        return `рдкреНрд░рдгрд╛рдо ${farmerName} ЁЯСЛ | рдХрд┐рд╕рд╛рди рдХреЗ рд╕рд╛рдереА тАУ annData`
      case "odia":
        return `рмирморм╕рнНрмХрм╛рм░ ${farmerName} ЁЯСЛ | рмХрнГрм╖рмХ рм╕рм╛рмернА тАУ annData`
      default:
        return `Hello ${farmerName} ЁЯСЛ | Farmer's Companion тАУ annData`
    }
  }

  const getMissionTagline = () => {
    switch (language) {
      case "hindi":
        return "annData тАУ рддрдХрдиреАрдХ рдХреЗ рд╕рд╛рде рдХрд┐рд╕рд╛рдиреЛрдВ рдХреЛ рд╕рд╢рдХреНрдд рдмрдирд╛рдирд╛"
      case "tamil":
        return "annData тАУ родрпКро┤ро┐ро▓рпНроирпБроЯрпНрокродрпНродрпБроЯройрпН ро╡ро┐ро╡роЪро╛ропро┐роХро│рпИ ро╡ро▓рпБрокрпНрокроЯрпБродрпНродрпБродро▓рпН"
      case "bengali":
        return "annData тАУ ржкрзНрж░ржпрзБржХрзНрждрж┐рж░ рж╕рж╛ржерзЗ ржХрзГрж╖ржХржжрзЗрж░ ржХрзНрж╖ржорждрж╛ржпрж╝ржи"
      case "marathi":
        return "annData тАУ рддрдВрддреНрд░рдЬреНрдЮрд╛рдирд╛рд╕рд╣ рд╢реЗрддрдХрд▒реНрдпрд╛рдВрдирд╛ рд╕рдХреНрд╖рдо рдХрд░рдгреЗ"
      case "gujarati":
        return "annData тАУ ркЯрлЗркХркирлЛрк▓рлЛркЬрлА рк╕рк╛ркерлЗ ркЦрлЗркбрлВркдрлЛркирлЗ рк╕рк╢ркХрлНркд ркмркирк╛рк╡рк╡рлБркВ"
      case "punjabi":
        return "annData тАУ ридриХриири╛ри▓рйЛриЬрйА риири╛ри▓ риХри┐ри╕ри╛риири╛риВ риирйВрй░ ри╕ри╕ри╝риХрид римригри╛риЙригри╛"
      case "kannada":
        return "annData тАУ р▓др▓Вр▓др│Нр▓░р▓Ьр│Нр▓╛р▓ир▓жр│Кр▓Вр▓жр▓┐р▓Чр│Ж р▓░р│Ир▓др▓░р▓ир│Нр▓ир│Б р▓╕р▓мр▓▓р│Ар▓Хр▓░р▓г"
      case "telugu":
        return "annData тАУ р░╕р░╛р░Вр░Хр▒Зр░др░┐р░Хр░др░др▒Л р░░р▒Ир░др▒Бр░▓р░ир▒Б р░╢р░Хр▒Нр░др░┐р░╡р░Вр░др░В р░Ър▒Зр░пр░бр░В"
      case "bhojpuri":
        return "annData тАУ рддрдХрдиреАрдХ рд╕реЗ рдХрд┐рд╕рд╛рди рдХреЗ рд╕рд╢рдХреНрддрд┐рдХрд░рдг"
      case "odia":
        return "annData тАУ рмкрнНрм░рмпрнБрмХрнНрмдрм┐рммрм┐рмжрнНрнЯрм╛ рм╕рм╣рм┐рмд рмХрнГрм╖рмХрморм╛рмирмЩрнНрмХрнБ рм╕рм╢рмХрнНрмдрм┐рмХрм░рмг"
      default:
        return "annData тАУ Empowering Farmers with Technology"
    }
  }

  const getCurrentQuote = () => {
    const quote = farmerQuotes[currentQuoteIndex]
    switch (language) {
      case "hindi":
      case "bengali":
      case "marathi":
      case "gujarati":
      case "punjabi":
      case "kannada":
      case "telugu":
      case "bhojpuri":
      case "odia":
        return quote.hindi
      default:
        return quote.english
    }
  }

  const getSearchPlaceholder = () => {
    switch (language) {
      case "hindi":
        return "ЁЯдЦ annData рд╕реЗ рдХреБрдЫ рднреА рдкреВрдЫреЗрдВ..."
      case "tamil":
        return "ЁЯдЦ annData роЗро▓рпН роОродрпИро╡рпЗрогрпБроорпН роХрпЗро│рпБроЩрпНроХро│рпН..."
      case "bengali":
        return "ЁЯдЦ annData ржПрж░ ржХрж╛ржЫрзЗ ржпрзЗ ржХрзЛржирзЛ ржХрж┐ржЫрзБ ржЬрж┐ржЬрзНржЮрж╛рж╕рж╛ ржХрж░рзБржи..."
      case "marathi":
        return "ЁЯдЦ annData рд▓рд╛ рдХрд╛рд╣реАрд╣реА рд╡рд┐рдЪрд╛рд░рд╛..."
      case "gujarati":
        return "ЁЯдЦ annData ркирлЗ ркХрк╛ркВркИ рккрлВркЫрлЛ..."
      case "punjabi":
        return "ЁЯдЦ annData ридрйЛриВ риХрйБриЭ ри╡рйА рикрйБрй▒риЫрйЛ..."
      case "kannada":
        return "ЁЯдЦ annData р▓Чр│Ж р▓пр▓╛р▓╡р│Бр▓жр▓╛р▓жр▓░р│В р▓Хр│Зр▓│р▓┐..."
      case "telugu":
        return "ЁЯдЦ annData р░ир▒Б р░Ор░ор▒Ир░ир░╛ р░Ер░бр░Чр░Вр░бр░┐..."
      case "bhojpuri":
        return "ЁЯдЦ annData рд╕реЗ рдХреБрдЫ рднреА рдкреВрдЫреАрдВ..."
      case "odia":
        return "ЁЯдЦ annData рмХрнБ рмХрм┐рмЫрм┐ рмкрнБрмЫрмирнНрмдрнБ..."
      default:
        return "ЁЯдЦ Ask annData anything..."
    }
  }

  const getButtonTexts = () => {
    switch (language) {
      case "hindi":
        return {
          voice: "ЁЯОЩя╕П рдЖрд╡рд╛рдЬрд╝",
          logout: "ЁЯЪк рд▓реЙрдЧрдЖрдЙрдЯ",
          madeWith: "рдХрд┐рд╕рд╛рдиреЛрдВ рдХреЗ рд▓рд┐рдП рдкреНрдпрд╛рд░ рд╕реЗ рдмрдирд╛рдпрд╛ рдЧрдпрд╛",
          forFarmers: "рдХрд┐рд╕рд╛рдиреЛрдВ рдХреЗ рд▓рд┐рдП рдкреНрдпрд╛рд░ рд╕реЗ рдмрдирд╛рдпрд╛ рдЧрдпрд╛"
        }
      case "tamil":
        return {
          voice: "ЁЯОЩя╕П роХрпБро░ро▓рпН",
          logout: "ЁЯЪк ро╡рпЖро│ро┐ропрпЗро▒рпБ",
          madeWith: "ро╡ро┐ро╡роЪро╛ропро┐роХро│рпБроХрпНроХро╛роХ роЕройрпНрокрпБроЯройрпН роЪрпЖропрпНропрокрпНрокроЯрпНроЯродрпБ",
          forFarmers: "ро╡ро┐ро╡роЪро╛ропро┐роХро│рпБроХрпНроХро╛роХ роЕройрпНрокрпБроЯройрпН роЪрпЖропрпНропрокрпНрокроЯрпНроЯродрпБ"
        }
      case "bengali":
        return {
          voice: "ЁЯОЩя╕П ржХржгрзНржарж╕рзНржмрж░",
          logout: "ЁЯЪк рж▓ржЧржЖржЙржЯ",
          madeWith: "ржХрзГрж╖ржХржжрзЗрж░ ржЬржирзНржп ржнрж╛рж▓рзЛржмрж╛рж╕рж╛ ржжрж┐рзЯрзЗ рждрзИрж░рж┐",
          forFarmers: "ржХрзГрж╖ржХржжрзЗрж░ ржЬржирзНржп ржнрж╛рж▓рзЛржмрж╛рж╕рж╛ ржжрж┐рзЯрзЗ рждрзИрж░рж┐"
        }
      case "marathi":
        return {
          voice: "ЁЯОЩя╕П рдЖрд╡рд╛рдЬ",
          logout: "ЁЯЪк рд▓реЙрдЧрдЖрдЙрдЯ",
          madeWith: "рд╢реЗрддрдХрд▒реНрдпрд╛рдВрд╕рд╛рдареА рдкреНрд░реЗрдорд╛рдиреЗ рдмрдирд╡рд┐рд▓реЗрд▓реЗ",
          forFarmers: "рд╢реЗрддрдХрд▒реНрдпрд╛рдВрд╕рд╛рдареА рдкреНрд░реЗрдорд╛рдиреЗ рдмрдирд╡рд┐рд▓реЗрд▓реЗ"
        }
      case "gujarati":
        return {
          voice: "ЁЯОЩя╕П ркЕрк╡рк╛ркЬ",
          logout: "ЁЯЪк рк▓рлЛркЧркЖркЙркЯ",
          madeWith: "ркЦрлЗркбрлВркдрлЛ ркорк╛ркЯрлЗ рккрлНрк░рлЗркоркерлА ркмркирк╛рк╡рлЗрк▓",
          forFarmers: "ркЦрлЗркбрлВркдрлЛ ркорк╛ркЯрлЗ рккрлНрк░рлЗркоркерлА ркмркирк╛рк╡рлЗрк▓"
        }
      case "punjabi":
        return {
          voice: "ЁЯОЩя╕П риЖри╡ри╛риЬри╝",
          logout: "ЁЯЪк ри▓рйЛриЧриЖриЙриЯ",
          madeWith: "риХри┐ри╕ри╛риири╛риВ ри▓риИ рикри┐риЖри░ риири╛ри▓ римригри╛риЗриЖ риЧри┐риЖ",
          forFarmers: "риХри┐ри╕ри╛риири╛риВ ри▓риИ рикри┐риЖри░ риири╛ри▓ римригри╛риЗриЖ риЧри┐риЖ"
        }
      case "kannada":
        return {
          voice: "ЁЯОЩя╕П р▓зр│Нр▓╡р▓ир▓┐",
          logout: "ЁЯЪк р▓▓р▓╛р▓Чр│Нр▓Фр▓Яр│Н",
          madeWith: "р▓░р│Ир▓др▓░р▓┐р▓Чр▓╛р▓Чр▓┐ р▓кр│Нр▓░р│Ар▓др▓┐р▓пр▓┐р▓Вр▓ж р▓др▓пр▓╛р▓░р▓┐р▓╕р▓▓р▓╛р▓Чр▓┐р▓жр│Ж",
          forFarmers: "р▓░р│Ир▓др▓░р▓┐р▓Чр▓╛р▓Чр▓┐ р▓кр│Нр▓░р│Ар▓др▓┐р▓пр▓┐р▓Вр▓ж р▓др▓пр▓╛р▓░р▓┐р▓╕р▓▓р▓╛р▓Чр▓┐р▓жр│Ж"
        }
      case "telugu":
        return {
          voice: "ЁЯОЩя╕П р░╡р░╛р░пр░┐р░╕р▒Н",
          logout: "ЁЯЪк р░▓р░╛р░Чр▒Нр░Ер░╡р▒Бр░Яр▒Н",
          madeWith: "р░░р▒Ир░др▒Бр░▓ р░Хр▒Лр░╕р░В р░кр▒Нр░░р▒Зр░ор░др▒Л р░др░пр░╛р░░р▒Б р░Ър▒Зр░пр░мр░бр░┐р░Вр░жр░┐",
          forFarmers: "р░░р▒Ир░др▒Бр░▓ р░Хр▒Лр░╕р░В р░кр▒Нр░░р▒Зр░ор░др▒Л р░др░пр░╛р░░р▒Б р░Ър▒Зр░пр░мр░бр░┐р░Вр░жр░┐"
        }
      case "bhojpuri":
        return {
          voice: "ЁЯОЩя╕П рдЖрд╡рд╛рдЬрд╝",
          logout: "ЁЯЪк рд▓реЙрдЧрдЖрдЙрдЯ",
          madeWith: "рдХрд┐рд╕рд╛рди рд▓реЛрдЧрди рдЦрд╛рддрд┐рд░ рдкреНрдпрд╛рд░ рд╕реЗ рдмрдирд╛рд╡рд▓ рдЧрдЗрд▓ рдмрд╛",
          forFarmers: "рдХрд┐рд╕рд╛рди рд▓реЛрдЧрди рдЦрд╛рддрд┐рд░ рдкреНрдпрд╛рд░ рд╕реЗ рдмрдирд╛рд╡рд▓ рдЧрдЗрд▓ рдмрд╛"
        }
      case "odia":
        return {
          voice: "ЁЯОЩя╕П рм╕рнНрн▒рм░",
          logout: "ЁЯЪк рм▓рмЧрмЖрмЙрмЯ",
          madeWith: "рмХрнГрм╖рмХрморм╛рмирмЩрнНрмХ рмкрм╛рмЗрмБ рмнрм▓рмкрм╛рмЗрммрм╛рм░рнЗ рмдрм┐рмЖрм░рм┐",
          forFarmers: "рмХрнГрм╖рмХрморм╛рмирмЩрнНрмХ рмкрм╛рмЗрмБ рмнрм▓рмкрм╛рмЗрммрм╛рм░рнЗ рмдрм┐рмЖрм░рм┐"
        }
      default:
        return {
          voice: "ЁЯОЩя╕П Voice",
          logout: "ЁЯЪк Logout",
          madeWith: "Made with тЭдя╕П for farmers",
          forFarmers: "Made with тЭдя╕П for farmers"
        }
    }
  }

  const getAlertMessages = () => {
    switch (language) {
      case "hindi":
        return {
          voiceAssistant: "рдЖрд╡рд╛рдЬрд╝ рд╕рд╣рд╛рдпрдХ рдЬрд▓реНрдж рдЖ рд░рд╣рд╛ рд╣реИ!",
          featureComingSoon: "рд╕реБрд╡рд┐рдзрд╛ рдЬрд▓реНрдж рдЖ рд░рд╣реА рд╣реИ!",
          youAsked: "рдЖрдкрдиреЗ рдкреВрдЫрд╛:",
          aiResponse: "AI рдЬрд╡рд╛рдм рдЬрд▓реНрдж рдЖ рд░рд╣рд╛ рд╣реИ!"
        }
      case "tamil":
        return {
          voiceAssistant: "роХрпБро░ро▓рпН родрпБрогрпИ ро╡рпЗроХрооро╛роХ ро╡ро░рпБроХро┐ро▒родрпБ!",
          featureComingSoon: "роЕроорпНроЪроорпН ро╡рпЗроХрооро╛роХ ро╡ро░рпБроХро┐ро▒родрпБ!",
          youAsked: "роирпАроЩрпНроХро│рпН роХрпЗроЯрпНроЯрпАро░рпНроХро│рпН:",
          aiResponse: "AI рокродро┐ро▓рпН ро╡рпЗроХрооро╛роХ ро╡ро░рпБроХро┐ро▒родрпБ!"
        }
      case "bengali":
        return {
          voiceAssistant: "ржнржпрж╝рзЗрж╕ рж╕рж╣рж╛ржпрж╝ржХ рж╢рзАржШрзНрж░ржЗ ржЖрж╕ржЫрзЗ!",
          featureComingSoon: "ржмрзИрж╢рж┐рж╖рзНржЯрзНржп рж╢рзАржШрзНрж░ржЗ ржЖрж╕ржЫрзЗ!",
          youAsked: "ржЖржкржирж┐ ржЬрж┐ржЬрзНржЮрж╛рж╕рж╛ ржХрж░рзЗржЫрзЗржи:",
          aiResponse: "AI ржЙрждрзНрждрж░ рж╢рзАржШрзНрж░ржЗ ржЖрж╕ржЫрзЗ!"
        }
      case "marathi":
        return {
          voiceAssistant: "рд╡реНрд╣реЙрдЗрд╕ рдЕрд╕рд┐рд╕реНрдЯрдВрдЯ рд▓рд╡рдХрд░рдЪ рдпреЗрдд рдЖрд╣реЗ!",
          featureComingSoon: "рд╡реИрд╢рд┐рд╖реНрдЯреНрдп рд▓рд╡рдХрд░рдЪ рдпреЗрдд рдЖрд╣реЗ!",
          youAsked: "рддреБрдореНрд╣реА рд╡рд┐рдЪрд╛рд░рд▓реЗ:",
          aiResponse: "AI рдЙрддреНрддрд░ рд▓рд╡рдХрд░рдЪ рдпреЗрдд рдЖрд╣реЗ!"
        }
      case "gujarati":
        return {
          voiceAssistant: "рк╡рлЙркЗрк╕ ркЖрк╕рк┐рк╕рлНркЯркирлНркЯ ркЬрк▓рлНркжрлА ркЖрк╡рлА рк░рк╣рлНркпрлБркВ ркЫрлЗ!",
          featureComingSoon: "рклрлАркЪрк░ ркЬрк▓рлНркжрлА ркЖрк╡рлА рк░рк╣рлНркпрлБркВ ркЫрлЗ!",
          youAsked: "ркдркорлЗ рккрлВркЫрлНркпрлБркВ:",
          aiResponse: "AI ркЬрк╡рк╛ркм ркЬрк▓рлНркжрлА ркЖрк╡рлА рк░рк╣рлНркпрлЛ ркЫрлЗ!"
        }
      case "punjabi":
        return {
          voiceAssistant: "ри╡ри╛риЗри╕ риЕри╕ри┐ри╕риЯрйИриВриЯ риЬри▓рижрйА риЖ ри░ри┐ри╣ри╛ ри╣рйИ!",
          featureComingSoon: "рилрйАриЪри░ риЬри▓рижрйА риЖ ри░ри┐ри╣ри╛ ри╣рйИ!",
          youAsked: "ридрйБри╕рйАриВ рикрйБрй▒риЫри┐риЖ:",
          aiResponse: "AI риЬри╡ри╛рим риЬри▓рижрйА риЖ ри░ри┐ри╣ри╛ ри╣рйИ!"
        }
      case "kannada":
        return {
          voiceAssistant: "р▓╡р▓╛р▓пр│Нр▓╕р│Н р▓Ер▓╕р▓┐р▓╕р│Нр▓Яр│Жр▓Вр▓Яр│Н р▓╢р│Ар▓Шр│Нр▓░р▓жр▓▓р│Нр▓▓р│З р▓мр▓░р│Бр▓др│Нр▓др▓┐р▓жр│Ж!",
          featureComingSoon: "р▓╡р│Ир▓╢р▓┐р▓╖р│Нр▓Яр│Нр▓п р▓╢р│Ар▓Шр│Нр▓░р▓жр▓▓р│Нр▓▓р│З р▓мр▓░р│Бр▓др│Нр▓др▓┐р▓жр│Ж!",
          youAsked: "р▓ир│Ар▓╡р│Б р▓Хр│Зр▓│р▓┐р▓жр│Нр▓жр│Ар▓░р▓┐:",
          aiResponse: "AI р▓Йр▓др│Нр▓др▓░ р▓╢р│Ар▓Шр│Нр▓░р▓жр▓▓р│Нр▓▓р│З р▓мр▓░р│Бр▓др│Нр▓др▓┐р▓жр│Ж!"
        }
      case "telugu":
        return {
          voiceAssistant: "р░╡р░╛р░пр░┐р░╕р▒Н р░Ер░╕р░┐р░╕р▒Нр░Яр▒Жр░Вр░Яр▒Н р░др▒Нр░╡р░░р░▓р▒Л р░╡р░╕р▒Нр░др▒Лр░Вр░жр░┐!",
          featureComingSoon: "р░лр▒Ар░Ър░░р▒Н р░др▒Нр░╡р░░р░▓р▒Л р░╡р░╕р▒Нр░др▒Лр░Вр░жр░┐!",
          youAsked: "р░ор▒Ар░░р▒Б р░Ер░бр░┐р░Чр░╛р░░р▒Б:",
          aiResponse: "AI р░╕р░ор░╛р░зр░╛р░ир░В р░др▒Нр░╡р░░р░▓р▒Л р░╡р░╕р▒Нр░др▒Лр░Вр░жр░┐!"
        }
      case "bhojpuri":
        return {
          voiceAssistant: "рдЖрд╡рд╛рдЬрд╝ рд╕рд╣рд╛рдпрдХ рдЬрд▓реНрджреА рдЖ рд░рд╣рд▓ рдмрд╛!",
          featureComingSoon: "рд╕реБрд╡рд┐рдзрд╛ рдЬрд▓реНрджреА рдЖ рд░рд╣рд▓ рдмрд╛!",
          youAsked: "рд░рд╛рдЙрд░ рдкреВрдЫрдиреА:",
          aiResponse: "AI рдЬрд╡рд╛рдм рдЬрд▓реНрджреА рдЖ рд░рд╣рд▓ рдмрд╛!"
        }
      case "odia":
        return {
          voiceAssistant: "рмнрмПрм╕рнН рмЖрм╕рм┐рм╖рнНрмЯрм╛рмгрнНрмЯ рм╢рнАрмШрнНрм░ рмЖрм╕рнБрмЫрм┐!",
          featureComingSoon: "рмлрм┐рмЪрм░ рм╢рнАрмШрнНрм░ рмЖрм╕рнБрмЫрм┐!",
          youAsked: "рмЖрмкрмг рмкрмЪрм╛рм░рм┐рм▓рнЗ:",
          aiResponse: "AI рмЙрмдрнНрмдрм░ рм╢рнАрмШрнНрм░ рмЖрм╕рнБрмЫрм┐!"
        }
      default:
        return {
          voiceAssistant: "Voice assistant coming soon!",
          featureComingSoon: "feature coming soon!",
          youAsked: "You asked:",
          aiResponse: "AI response coming soon!"
        }
    }
  }

  const handleFeatureClick = async (feature: string, featureType: string) => {
    // Handle weather card specifically
    if (featureType === 'weather') {
      await handleWeatherCardClick()
      return
    }
    
    // Handle other AI-powered features
    if (['crop', 'pest', 'market', 'schemes', 'soil'].includes(featureType)) {
      const params = new URLSearchParams({
        type: featureType,
        location: userLocation || 'India'
      })
      router.push(`/chat?${params.toString()}`)
      return
    }
    
    // For other features, show coming soon message
    const messages = getAlertMessages()
    alert(`${feature} ${messages.featureComingSoon}`)
  }

  const handleWeatherCardClick = async () => {
    try {
      // Get user's location (you can enhance this with geolocation API)
      const location = userLocation || 'Delhi' // Default location
      
      // Fetch current weather data
      const weatherResponse = await apiClient.getCurrentWeather(location)
      
      const params = new URLSearchParams({
        type: 'weather',
        location: location
      })
      
      if (weatherResponse.success) {
        params.append('weatherData', encodeURIComponent(JSON.stringify(weatherResponse.data)))
      }
      
      router.push(`/chat?${params.toString()}`)
    } catch (error) {
      console.error('Weather fetch error:', error)
      // Still navigate to chat but without weather data
      const params = new URLSearchParams({
        type: 'weather',
        location: userLocation || 'Delhi'
      })
      router.push(`/chat?${params.toString()}`)
    }
  }

  const handleAskAnnData = () => {
    if (askQuery.trim()) {
      const params = new URLSearchParams({
        type: 'general',
        query: askQuery.trim()
      })
      router.push(`/chat?${params.toString()}`)
      setAskQuery("")
    }
  }

  const handleChatOpen = () => {
    router.push('/chat')
  }

  return (
    <div className="min-h-screen relative overflow-hidden">
      {/* Animated Background */}
      <div className="absolute inset-0 bg-gradient-to-br from-emerald-50 via-green-50 to-amber-50 animate-gradient-x"></div>
      <div className="absolute inset-0 opacity-20" style={{
        backgroundImage: `url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%2334d399' fill-opacity='0.05'%3E%3Ccircle cx='30' cy='30' r='4'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E")`
      }}></div>
      
      {/* Floating Elements */}
      <div className="absolute top-10 right-10 w-20 h-20 bg-green-200/10 rounded-full blur-xl animate-float"></div>
      <div className="absolute bottom-10 left-10 w-24 h-24 bg-amber-200/10 rounded-full blur-xl animate-float-delayed"></div>
      
      {/* Top Navigation Bar */}
      <header className="bg-white/95 backdrop-blur-md border-b-2 border-primary/20 shadow-xl relative z-10">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4 sm:py-6">
          <div className="flex items-center justify-between flex-wrap gap-4 sm:gap-0">
            <Select value={language} onValueChange={handleLanguageChange}>
              <SelectTrigger className="w-32 sm:w-40 h-10 sm:h-12 text-sm sm:text-base border-2 border-primary/30 bg-white/90 backdrop-blur-sm shadow-lg rounded-xl hover:shadow-xl transition-all duration-300">
                <SelectValue placeholder="Select Language" />
              </SelectTrigger>
              <SelectContent className="bg-white/95 backdrop-blur-md border-2 border-primary/20 shadow-xl rounded-xl">
                <SelectItem value="english" className="hover:bg-green-50">ЁЯЗмЁЯЗз English</SelectItem>
                <SelectItem value="hindi" className="hover:bg-green-50">ЁЯЗоЁЯЗ│ рд╣рд┐рдВрджреА</SelectItem>
                <SelectItem value="tamil" className="hover:bg-green-50">ЁЯЗоЁЯЗ│ родрооро┐ро┤рпН</SelectItem>
                <SelectItem value="bengali" className="hover:bg-green-50">ЁЯЗоЁЯЗ│ ржмрж╛ржВрж▓рж╛</SelectItem>
                <SelectItem value="marathi" className="hover:bg-green-50">ЁЯЗоЁЯЗ│ рдорд░рд╛рдареА</SelectItem>
                <SelectItem value="gujarati" className="hover:bg-green-50">ЁЯЗоЁЯЗ│ ркЧрлБркЬрк░рк╛ркдрлА</SelectItem>
                <SelectItem value="punjabi" className="hover:bg-green-50">ЁЯЗоЁЯЗ│ рикрй░риЬри╛римрйА</SelectItem>
                <SelectItem value="kannada" className="hover:bg-green-50">ЁЯЗоЁЯЗ│ р▓Хр▓ир│Нр▓ир▓б</SelectItem>
                <SelectItem value="telugu" className="hover:bg-green-50">ЁЯЗоЁЯЗ│ р░др▒Жр░▓р▒Бр░Чр▒Б</SelectItem>
                <SelectItem value="bhojpuri" className="hover:bg-green-50">ЁЯЗоЁЯЗ│ рднреЛрдЬрдкреБрд░реА</SelectItem>
                <SelectItem value="odia" className="hover:bg-green-50">ЁЯЗоЁЯЗ│ рмУрмбрм╝рм┐рмЖ</SelectItem>
              </SelectContent>
            </Select>

            {/* App Title */}
            <h1 className="text-xl sm:text-2xl lg:text-3xl font-bold flex items-center gap-2 sm:gap-3 order-first sm:order-none w-full sm:w-auto justify-center sm:justify-start">
              <Tractor className="h-6 w-6 sm:h-8 sm:w-8 text-amber-600 animate-pulse" />
              <span className="bg-gradient-to-r from-green-600 via-emerald-600 to-amber-600 bg-clip-text text-transparent font-extrabold tracking-wide">
                annData
              </span>
              <span className="text-lg sm:text-xl animate-bounce">ЁЯМ╛</span>
            </h1>

            {/* Voice Button and Logout */}
            <div className="flex items-center gap-2 sm:gap-3">
              <Button
                variant="outline"
                size="sm"
                className="border-2 border-blue-500 text-blue-600 hover:bg-blue-500 hover:text-white bg-white/90 backdrop-blur-sm shadow-lg rounded-xl h-10 sm:h-12 px-2 sm:px-4 transition-all duration-300 hover:scale-105"
                onClick={() => alert(getAlertMessages().voiceAssistant)}
              >
                <Mic className="h-4 w-4 sm:h-5 sm:w-5 sm:mr-2" />
                <span className="hidden sm:inline">{getButtonTexts().voice}</span>
              </Button>
              <Button
                variant="outline"
                size="sm"
                onClick={onLogout}
                className="border-2 border-red-500 text-red-600 hover:bg-red-500 hover:text-white bg-white/90 backdrop-blur-sm shadow-lg rounded-xl h-10 sm:h-12 px-2 sm:px-4 transition-all duration-300 hover:scale-105"
              >
                <LogOut className="h-4 w-4 sm:h-5 sm:w-5 sm:mr-2" />
                <span className="hidden sm:inline">{getButtonTexts().logout}</span>
              </Button>
            </div>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6 sm:py-8 relative z-10">
        {/* Welcome Section */}
        <div className="text-center mb-8 sm:mb-12">
          <h2 className="text-2xl sm:text-3xl lg:text-4xl font-bold mb-4 sm:mb-6 text-balance bg-gradient-to-r from-green-600 via-emerald-600 to-amber-600 bg-clip-text text-transparent px-2">{getGreeting()}</h2>
          <div className="bg-gradient-to-r from-white/90 to-white/80 backdrop-blur-md rounded-xl sm:rounded-2xl p-4 sm:p-6 max-w-2xl mx-auto border-2 border-primary/30 mb-6 sm:mb-8 shadow-xl hover:shadow-2xl transition-all duration-300">
            <p className="text-lg sm:text-xl lg:text-2xl font-bold text-green-700 px-2">{getMissionTagline()}</p>
          </div>

          <div className="max-w-2xl mx-auto mb-6 sm:mb-8 px-2">
            <div className="relative group">
              <div className="absolute inset-0 bg-gradient-to-r from-green-400/20 to-blue-400/20 rounded-2xl blur opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
              <Input
                type="text"
                placeholder={getSearchPlaceholder()}
                value={askQuery}
                onChange={(e) => setAskQuery(e.target.value)}
                className="h-14 sm:h-16 text-base sm:text-lg border-2 border-primary/30 focus:border-primary rounded-xl sm:rounded-2xl pr-14 sm:pr-16 pl-4 sm:pl-6 bg-white/90 backdrop-blur-sm shadow-lg hover:shadow-xl transition-all duration-300 relative z-10"
                onKeyPress={(e) => e.key === "Enter" && handleAskAnnData()}
              />
              <Button
                onClick={handleAskAnnData}
                className="absolute right-1 sm:right-2 top-1 sm:top-2 h-12 sm:h-12 px-3 sm:px-4 bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700 text-white shadow-lg rounded-lg sm:rounded-xl transition-all duration-300 hover:scale-105"
                disabled={!askQuery.trim()}
              >
                <Search className="h-4 w-4 sm:h-5 sm:w-5" />
              </Button>
            </div>
          </div>

          {/* Rotating Quotes */}
          <div className="bg-gradient-to-r from-green-50 via-emerald-50 to-green-50 rounded-xl sm:rounded-2xl p-4 sm:p-6 max-w-2xl mx-auto border-2 border-green-200/50 shadow-lg">
            <p className="text-sm sm:text-base lg:text-lg font-semibold text-green-800 italic text-balance flex items-center justify-center gap-1 sm:gap-2 flex-wrap px-2">
              <span className="text-xl">ЁЯМ▒</span>
              "{getCurrentQuote()}"
              <span className="text-lg sm:text-xl">ЁЯМ╛</span>
            </p>
          </div>
        </div>

        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 sm:gap-6 lg:gap-8 max-w-7xl mx-auto px-2">
          {getFeatures().map((feature, index) => {
            const IconComponent = feature.icon
            // Map feature types based on index
            const featureTypes = ['weather', 'crop', 'pest', 'market', 'schemes', 'community', 'soil', 'general', 'help']
            const featureType = featureTypes[index] || 'general'
            
            return (
              <Card
                key={index}
                className={`cursor-pointer transition-all duration-500 transform hover:scale-105 sm:hover:scale-110 hover:shadow-2xl border-0 bg-gradient-to-br ${feature.gradient} ${feature.hoverGradient} text-white overflow-hidden h-40 sm:h-44 lg:h-48 rounded-2xl sm:rounded-3xl relative group`}
                onClick={() => handleFeatureClick(feature.label, featureType)}
              >
                {/* Card Glow Effect */}
                <div className="absolute inset-0 bg-gradient-to-r from-white/10 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                
                <CardContent className="p-4 sm:p-6 lg:p-8 text-center h-full flex flex-col justify-center relative z-10">
                  <div className="flex justify-center mb-3 sm:mb-4 lg:mb-6">
                    <div className="bg-white/25 p-3 sm:p-4 lg:p-6 rounded-full backdrop-blur-sm shadow-lg border-2 border-white/30 group-hover:scale-110 transition-transform duration-300">
                      <IconComponent className="h-8 w-8 sm:h-10 sm:w-10 lg:h-14 lg:w-14" />
                    </div>
                  </div>
                  <h3 className="text-xs sm:text-sm lg:text-base font-bold text-balance leading-tight group-hover:scale-105 transition-transform duration-300 px-1">{feature.label}</h3>
                </CardContent>
              </Card>
            )
          })}
        </div>

        {/* Footer */}
        <div className="text-center mt-12 sm:mt-16">
          <div className="bg-gradient-to-r from-green-50 via-emerald-50 to-amber-50 rounded-xl sm:rounded-2xl p-4 sm:p-6 max-w-2xl mx-auto border-2 border-green-200/30 shadow-lg">
            <p className="text-base sm:text-lg font-semibold text-green-700 flex items-center justify-center gap-1 sm:gap-2 flex-wrap">
              <span className="text-xl">ЁЯМ▒</span>
              {getButtonTexts().madeWith}
              <span className="text-lg sm:text-xl">ЁЯСитАНЁЯМ╛</span>
            </p>
            <p className="text-sm sm:text-base font-medium text-green-600 mt-2 text-center">
              {language !== 'english' ? getButtonTexts().forFarmers : ''}
            </p>
          </div>
        </div>
      </main>

      {/* Floating Chat Button */}
      <Button
        className="fixed bottom-6 right-6 z-50 bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-600 hover:to-emerald-600 text-white shadow-xl rounded-full p-4 transition-all duration-300 hover:scale-110 animate-bounce"
        onClick={handleChatOpen}
      >
        <Bot className="h-6 w-6" />
      </Button>
    </div>
  )
}
