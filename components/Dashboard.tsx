"use client"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent } from "@/components/ui/card"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Input } from "@/components/ui/input"
import {
  Cloud,
  Sprout,
  DollarSign,
  FileText,
  Users,
  FlaskConical,
  MessageCircle,
  HelpCircle,
  Mic,
  LogOut,
  Search,
  Tractor,
} from "lucide-react"

interface DashboardProps {
  farmerName: string
  onLogout: () => void
}

const features = [
  {
    icon: Cloud,
    label: "рдореМрд╕рдо / Weather / ро╡ро╛ройро┐ро▓рпИ",
    gradient: "from-blue-400 to-cyan-500",
    hoverGradient: "hover:from-blue-500 hover:to-cyan-600",
  },
  {
    icon: Sprout,
    label: "рдлрд╕рд▓ рд╕реБрдЭрд╛рд╡ / Crop Suggestion / рокропро┐ро░рпН рокро░ро┐роирпНродрпБро░рпИ",
    gradient: "from-green-400 to-emerald-500",
    hoverGradient: "hover:from-green-500 hover:to-emerald-600",
  },
  {
    icon: DollarSign,
    label: "рдордВрдбреА рднрд╛рд╡ / Market Prices / роЪроирпНродрпИ ро╡ро┐ро▓рпИ",
    gradient: "from-yellow-400 to-orange-500",
    hoverGradient: "hover:from-yellow-500 hover:to-orange-600",
  },
  {
    icon: FileText,
    label: "рд╕рд░рдХрд╛рд░реА рдпреЛрдЬрдирд╛рдПрдВ / Govt Schemes / роЕро░роЪрпБ родро┐роЯрпНроЯроЩрпНроХро│рпН",
    gradient: "from-purple-400 to-violet-500",
    hoverGradient: "hover:from-purple-500 hover:to-violet-600",
  },
  {
    icon: Users,
    label: "рдХрд┐рд╕рд╛рди рд╕рдореБрджрд╛рдп / Community / ро╡ро┐ро╡роЪро╛ропро┐ роЪроорпВроХроорпН",
    gradient: "from-pink-400 to-rose-500",
    hoverGradient: "hover:from-pink-500 hover:to-rose-600",
  },
  {
    icon: FlaskConical,
    label: "рдорд┐рдЯреНрдЯреА рд╕реНрд╡рд╛рд╕реНрдереНрдп / Soil Health / роорогрпН роЖро░рпЛроХрпНроХро┐ропроорпН",
    gradient: "from-amber-400 to-yellow-500",
    hoverGradient: "hover:from-amber-500 hover:to-yellow-600",
  },
  {
    icon: MessageCircle,
    label: "AI рднрд╛рд╖рд╛ рд╕рд╣рд╛рдпрдХ / AI Lingual Talk / AI роорпКро┤ро┐ роЙродро╡ро┐",
    gradient: "from-indigo-400 to-blue-500",
    hoverGradient: "hover:from-indigo-500 hover:to-blue-600",
  },
  {
    icon: HelpCircle,
    label: "рд╕рд╣рд╛рдпрддрд╛ рдбреЗрд╕реНрдХ / Help Desk / роЙродро╡ро┐ роорпИропроорпН",
    gradient: "from-teal-400 to-green-500",
    hoverGradient: "hover:from-teal-500 hover:to-green-600",
  },
]

const farmerQuotes = [
  {
    hindi: "рдЦреЗрддреА рдПрдХ рдХрд▓рд╛ рд╣реИ, рдХрд┐рд╕рд╛рди рдПрдХ рдХрд▓рд╛рдХрд╛рд░ рд╣реИред",
    english: "Farming is an art, the farmer is an artist.",
    tamil: "ро╡ро┐ро╡роЪро╛ропроорпН роТро░рпБ роХро▓рпИ, ро╡ро┐ро╡роЪро╛ропро┐ роТро░рпБ роХро▓рпИроЮро░рпН.",
  },
  {
    hindi: "рдореЗрд╣рдирдд рдХрд╛ рдлрд▓ рд╣рдореЗрд╢рд╛ рдореАрдард╛ рд╣реЛрддрд╛ рд╣реИред",
    english: "The fruit of hard work is always sweet.",
    tamil: "роХроЯро┐рой роЙро┤рпИрокрпНрокро┐ройрпН рокро▓ройрпН роОрокрпНрокрпЛродрпБроорпН роЗройро┐роорпИропро╛ройродрпБ.",
  },
  {
    hindi: "рдзрд░рддреА рдорд╛рддрд╛ рдХрд╛ рд╕рдореНрдорд╛рди рдХрд░реЛ, рд╡реЛ рддреБрдореНрд╣реЗрдВ рд╕рдм рдХреБрдЫ рджреЗрдЧреАред",
    english: "Respect Mother Earth, she will give you everything.",
    tamil: "рокрпВрооро┐ родро╛ропрпИ роородро┐роХрпНроХро╡рпБроорпН, роЕро╡ро│рпН роЙроЩрпНроХро│рпБроХрпНроХрпБ роОро▓рпНро▓ро╛ро╡ро▒рпНро▒рпИропрпБроорпН родро░рпБро╡ро╛ро│рпН.",
  },
  {
    hindi: "рдмреАрдЬ рдореЗрдВ рдЫреБрдкрд╛ рд╣реИ рдкреВрд░рд╛ рдЬрдВрдЧрд▓ред",
    english: "A whole forest is hidden in a seed.",
    tamil: "роТро░рпБ ро╡ро┐родрпИропро┐ро▓рпН роорпБро┤рпБ роХро╛роЯрпБроорпН рооро▒рпИроирпНродрпБро│рпНро│родрпБ.",
  },
]

export default function Dashboard({ farmerName, onLogout }: DashboardProps) {
  const [language, setLanguage] = useState("english")
  const [currentQuoteIndex, setCurrentQuoteIndex] = useState(0)
  const [askQuery, setAskQuery] = useState("")

  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentQuoteIndex((prev) => (prev + 1) % farmerQuotes.length)
    }, 10000) // 10 seconds

    return () => clearInterval(interval)
  }, [])

  const getGreeting = () => {
    switch (language) {
      case "hindi":
        return `рдирдорд╕реНрддреЗ ${farmerName} ЁЯСЛ | рдХрд┐рд╕рд╛рди рдХрд╛ рд╕рд╛рдереА тАУ annData`
      case "tamil":
        return `ро╡рогроХрпНроХроорпН ${farmerName} ЁЯСЛ | ро╡ро┐ро╡роЪро╛ропро┐ропро┐ройрпН родрпБрогрпИ тАУ annData`
      case "bengali":
        return `ржиржорж╕рзНржХрж╛рж░ ${farmerName} ЁЯСЛ | ржХрзГрж╖ржХрзЗрж░ рж╕рж╛ржерзА тАУ annData`
      case "marathi":
        return `рдирдорд╕реНрдХрд╛рд░ ${farmerName} ЁЯСЛ | рд╢реЗрддрдХрд▒реНрдпрд╛рдЪрд╛ рд╕рд╛рдереА тАУ annData`
      case "gujarati":
        return `ркиркорк╕рлНркдрлЗ ${farmerName} ЁЯСЛ | ркЦрлЗркбрлВркдркирлЛ рк╕рк╛ркерлА тАУ annData`
      case "punjabi":
        return `ри╕рид ри╕рйНри░рйА риЕриХри╛ри▓ ${farmerName} ЁЯСЛ | риХри┐ри╕ри╛рии рижри╛ ри╕ри╛риерйА тАУ annData`
      case "kannada":
        return `р▓ир▓ор▓╕р│Нр▓Хр▓╛р▓░ ${farmerName} ЁЯСЛ | р▓░р│Ир▓др▓и р▓╕р▓╣р▓╛р▓пр▓Х тАУ annData`
      case "telugu":
        return `р░ир░ор░╕р▒Нр░Хр░╛р░░р░В ${farmerName} ЁЯСЛ | р░░р▒Ир░др▒Б р░ор░┐р░др▒Нр░░р▒Бр░бр▒Б тАУ annData`
      case "bhojpuri":
        return `рдкреНрд░рдгрд╛рдо ${farmerName} ЁЯСЛ | рдХрд┐рд╕рд╛рди рдХреЗ рд╕рд╛рдереА тАУ annData`
      case "odia":
        return `рмирморм╕рнНрмХрм╛рм░ ${farmerName} ЁЯСЛ | рмХрнГрм╖рмХрмЩрнНрмХ рм╕рм╛рмернА тАУ annData`
      default:
        return `Hello ${farmerName} ЁЯСЛ | Farmer's Companion тАУ annData`
    }
  }

  const getMissionTagline = () => {
    switch (language) {
      case "hindi":
        return "annData тАУ рддрдХрдиреАрдХ рдХреЗ рд╕рд╛рде рдХрд┐рд╕рд╛рдиреЛрдВ рдХреЛ рд╕рд╢рдХреНрдд рдмрдирд╛рдирд╛"
      case "tamil":
        return "annData тАУ родрпКро┤ро┐ро▓рпНроирпБроЯрпНрокродрпНродрпБроЯройрпН ро╡ро┐ро╡роЪро╛ропро┐роХро│рпИ ро╡ро▓рпБрокрпНрокроЯрпБродрпНродрпБродро▓рпН"
      case "bengali":
        return "annData тАУ ржкрзНрж░ржпрзБржХрзНрждрж┐рж░ рж╕рж╛ржерзЗ ржХрзГрж╖ржХржжрзЗрж░ ржХрзНрж╖ржорждрж╛ржпрж╝ржи"
      case "marathi":
        return "annData тАУ рддрдВрддреНрд░рдЬреНрдЮрд╛рдирд╛рд╕рд╣ рд╢реЗрддрдХрд▒реНрдпрд╛рдВрдирд╛ рд╕рдХреНрд╖рдо рдХрд░рдгреЗ"
      case "gujarati":
        return "annData тАУ ркЯрлЗркХркирлЛрк▓рлЛркЬрлА рк╕рк╛ркерлЗ ркЦрлЗркбрлВркдрлЛркирлЗ рк╕рк╢ркХрлНркд ркмркирк╛рк╡рк╡рлБркВ"
      case "punjabi":
        return "annData тАУ ридриХриири╛ри▓рйЛриЬрйА риири╛ри▓ риХри┐ри╕ри╛риири╛риВ риирйВрй░ ри╕ри╕ри╝риХрид римригри╛риЙригри╛"
      case "kannada":
        return "annData тАУ р▓др▓Вр▓др│Нр▓░р▓Ьр│Нр▓╛р▓ир▓жр│Кр▓Вр▓жр▓┐р▓Чр│Ж р▓░р│Ир▓др▓░р▓ир│Нр▓ир│Б р▓╕р▓мр▓▓р│Ар▓Хр▓░р▓г"
      case "telugu":
        return "annData тАУ р░╕р░╛р░Вр░Хр▒Зр░др░┐р░Хр░др░др▒Л р░░р▒Ир░др▒Бр░▓р░ир▒Б р░╢р░Хр▒Нр░др░┐р░╡р░Вр░др░В р░Ър▒Зр░пр░бр░В"
      case "bhojpuri":
        return "annData тАУ рддрдХрдиреАрдХ рд╕реЗ рдХрд┐рд╕рд╛рди рдХреЗ рд╕рд╢рдХреНрддрд┐рдХрд░рдг"
      case "odia":
        return "annData тАУ рмкрнНрм░рмпрнБрмХрнНрмдрм┐рммрм┐рмжрнНрнЯрм╛ рм╕рм╣рм┐рмд рмХрнГрм╖рмХрморм╛рмирмЩрнНрмХрнБ рм╕рм╢рмХрнНрмдрм┐рмХрм░рмг"
      default:
        return "annData тАУ Empowering Farmers with Technology"
    }
  }

  const getCurrentQuote = () => {
    const quote = farmerQuotes[currentQuoteIndex]
    switch (language) {
      case "hindi":
      case "bengali":
      case "marathi":
      case "gujarati":
      case "punjabi":
      case "kannada":
      case "telugu":
      case "bhojpuri":
      case "odia":
        return quote.hindi
      default:
        return quote.english
    }
  }

  const handleFeatureClick = (feature: string) => {
    alert(`${feature} feature coming soon! / ${feature} рд╕реБрд╡рд┐рдзрд╛ рдЬрд▓реНрдж рдЖ рд░рд╣реА рд╣реИ!`)
  }

  const handleAskAnnData = () => {
    if (askQuery.trim()) {
      alert(`You asked: "${askQuery}". AI response coming soon! / рдЖрдкрдиреЗ рдкреВрдЫрд╛: "${askQuery}". AI рдЬрд╡рд╛рдм рдЬрд▓реНрдж рдЖ рд░рд╣рд╛ рд╣реИ!`)
      setAskQuery("")
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-green-50 to-amber-50">
      {/* Top Navigation Bar */}
      <header className="bg-white/90 backdrop-blur-sm border-b-2 border-primary/20 shadow-sm">
        <div className="max-w-7xl mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <Select value={language} onValueChange={setLanguage}>
              <SelectTrigger className="w-36 h-10 border-2 border-primary/20">
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="english">English</SelectItem>
                <SelectItem value="hindi">рд╣рд┐рдВрджреА</SelectItem>
                <SelectItem value="tamil">родрооро┐ро┤рпН</SelectItem>
                <SelectItem value="bengali">ржмрж╛ржВрж▓рж╛</SelectItem>
                <SelectItem value="marathi">рдорд░рд╛рдареА</SelectItem>
                <SelectItem value="gujarati">ркЧрлБркЬрк░рк╛ркдрлА</SelectItem>
                <SelectItem value="punjabi">рикрй░риЬри╛римрйА</SelectItem>
                <SelectItem value="kannada">р▓Хр▓ир│Нр▓ир▓б</SelectItem>
                <SelectItem value="telugu">р░др▒Жр░▓р▒Бр░Чр▒Б</SelectItem>
                <SelectItem value="bhojpuri">рднреЛрдЬрдкреБрд░реА</SelectItem>
                <SelectItem value="odia">рмУрмбрм╝рм┐рмЖ</SelectItem>
              </SelectContent>
            </Select>

            {/* App Title */}
            <h1 className="text-2xl font-bold text-primary flex items-center gap-2">
              <Tractor className="h-6 w-6 text-amber-600" />
              <span className="bg-gradient-to-r from-green-600 to-amber-600 bg-clip-text text-transparent">
                annData
              </span>
            </h1>

            {/* Voice Button and Logout */}
            <div className="flex items-center gap-2">
              <Button
                variant="outline"
                size="sm"
                className="border-2 border-primary text-primary hover:bg-primary hover:text-primary-foreground bg-transparent"
                onClick={() => alert("Voice assistant coming soon! / рдЖрд╡рд╛рдЬрд╝ рд╕рд╣рд╛рдпрдХ рдЬрд▓реНрдж рдЖ рд░рд╣рд╛ рд╣реИ!")}
              >
                <Mic className="h-4 w-4" />
              </Button>
              <Button
                variant="outline"
                size="sm"
                onClick={onLogout}
                className="border-2 border-destructive text-destructive hover:bg-destructive hover:text-destructive-foreground bg-transparent"
              >
                <LogOut className="h-4 w-4" />
              </Button>
            </div>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="max-w-7xl mx-auto px-4 py-8">
        {/* Welcome Section */}
        <div className="text-center mb-8">
          <h2 className="text-3xl font-bold text-primary mb-4 text-balance">{getGreeting()}</h2>
          <div className="bg-white/80 backdrop-blur-sm rounded-lg p-4 max-w-xl mx-auto border-2 border-primary/20 mb-6">
            <p className="text-xl font-bold text-primary">{getMissionTagline()}</p>
          </div>

          <div className="max-w-md mx-auto mb-6">
            <div className="relative">
              <Input
                type="text"
                placeholder="ЁЯСЙ Ask annData anything... / annData рд╕реЗ рдХреБрдЫ рднреА рдкреВрдЫреЗрдВ..."
                value={askQuery}
                onChange={(e) => setAskQuery(e.target.value)}
                className="h-14 text-lg border-2 border-primary/20 focus:border-primary pr-12 pl-4"
                onKeyPress={(e) => e.key === "Enter" && handleAskAnnData()}
              />
              <Button
                onClick={handleAskAnnData}
                className="absolute right-1 top-1 h-12 px-4 bg-primary hover:bg-primary/90"
                disabled={!askQuery.trim()}
              >
                <Search className="h-5 w-5" />
              </Button>
            </div>
          </div>

          {/* Rotating Quotes */}
          <div className="bg-green-50 rounded-lg p-3 max-w-lg mx-auto border border-green-200">
            <p className="text-sm font-medium text-green-800 italic text-balance">"{getCurrentQuote()}"</p>
          </div>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 max-w-6xl mx-auto">
          {features.map((feature, index) => {
            const IconComponent = feature.icon
            return (
              <Card
                key={index}
                className={`cursor-pointer transition-all duration-300 transform hover:scale-105 hover:shadow-xl border-2 border-white/50 bg-gradient-to-br ${feature.gradient} ${feature.hoverGradient} text-white overflow-hidden h-40`}
                onClick={() => handleFeatureClick(feature.label)}
              >
                <CardContent className="p-6 text-center h-full flex flex-col justify-center">
                  <div className="flex justify-center mb-4">
                    <div className="bg-white/20 p-4 rounded-full backdrop-blur-sm">
                      <IconComponent className="h-12 w-12" />
                    </div>
                  </div>
                  <h3 className="text-sm font-bold text-balance leading-tight">{feature.label}</h3>
                </CardContent>
              </Card>
            )
          })}
        </div>

        {/* Footer */}
        <div className="text-center mt-12 text-muted-foreground">
          <p className="text-sm">Made with тЭдя╕П for farmers | рдХрд┐рд╕рд╛рдиреЛрдВ рдХреЗ рд▓рд┐рдП рдкреНрдпрд╛рд░ рд╕реЗ рдмрдирд╛рдпрд╛ рдЧрдпрд╛</p>
        </div>
      </main>
    </div>
  )
}
